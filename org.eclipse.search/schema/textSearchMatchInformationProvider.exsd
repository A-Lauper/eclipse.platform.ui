<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.search">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.search" id="textSearchMatchInformationProvider" name="Text Search Match Information Provider"/>
      </appInfo>
      <documentation>
         The extension point allows to register a provider of more information for text search matches
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="textSearchMatchInformationProvider" minOccurs="1" maxOccurs="unbounded"/>
            <element ref="textSearchDefaultFilePatterns" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="textSearchMatchInformationProvider">
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  Class of the scanner that will be created, must extend org.eclipse.search.ui.text.SearchMatchInformationProvider.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.search.ui.text.SearchMatchInformationProvider"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="fileExtensions" type="string">
            <annotation>
               <documentation>
                  Comma separated list of file-extensions for which the information provider shall be applied.  E.g. &apos;.c,.h,.cpp&apos;. In case an extension does not start with a dot, a match against the complete file-name will be attempted. E.g. &apos;Makefile,.mk&apos;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="contentTypeIDs" type="string">
            <annotation>
               <documentation>
                  A comma-separated list of content type ids for which the supplied information provider shall be used. E.g.: &apos;org.eclipse.cdt.core.cSource,org.eclipse.cdt.core.cppSource&apos;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="supportsComments" type="boolean">
            <annotation>
               <documentation>
                  True, if the information provider can detect comments. False, otherwise.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="supportsStrings" type="boolean">
            <annotation>
               <documentation>
                  True, if the information provider can detect string literals False, otherwise.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="supportsIncludes" type="boolean">
            <annotation>
               <documentation>
                  True, if the information provider can detect include or import statements. False, otherwise.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="supportsPreprocessor" type="boolean">
            <annotation>
               <documentation>
                  True, if the information provider can detect preprocessor directives. False, otherwise.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="supportsFunctions" type="boolean">
            <annotation>
               <documentation>
                  True, if the information provider can detect function bodies. False, otherwise.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="textSearchDefaultFilePatterns">
      <annotation>
         <documentation>
            A list of file patterns the user can select when searching text files.
         </documentation>
      </annotation>
      <complexType>
         <attribute name="filePatterns" type="string">
            <annotation>
               <documentation>
                  The file patterns to be presented to the user. E.g.: *.java,*.xml,*.mf
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         3.2
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         As an example, here is the markup for the java scanner.

&lt;p&gt;
&lt;pre&gt;
&lt;extension id=&quot;JavaScanner&quot;
      point=&quot;org.eclipse.search.textSearchMatchInformationProvider&quot;&gt;
   &lt;textSearchMatchInformationProvider
         class=&quot;org.eclipse.search2.internal.ui.text2.JavaScanner&quot;
         contentTypeIDs=&quot;org.eclipse.jdt.core.javaSource&quot;
         fileExtensions=&quot;.java&quot;
         supportsComments=&quot;true&quot;
         supportsStrings=&quot;true&quot;
         supportsIncludes=&quot;true&quot;/&gt;
&lt;/extension&gt;
&lt;/pre&gt;
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         The contributed class must implement &lt;code&gt;org.eclipse.search.ui.text.SearchMatchInformationProvider&lt;/code&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         The search plugin provides both a scanner for java-files and for c/c++-files.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2006 Wind River Systems and others.
 All rights reserved. This program and the accompanying materials 
 are made available under the terms of the Eclipse Public License v1.0 
 which accompanies this distribution, and is available at &lt;a href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;
      </documentation>
   </annotation>

</schema>
